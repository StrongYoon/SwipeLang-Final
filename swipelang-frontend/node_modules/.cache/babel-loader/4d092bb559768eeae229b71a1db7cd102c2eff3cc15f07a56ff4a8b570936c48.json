{"ast":null,"code":"var _jsxFileName = \"D:\\\\Python\\\\swipelang-frontend\\\\src\\\\components\\\\QuizMode.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst QuizMode = ({\n  knownSlangs,\n  onExit\n}) => {\n  _s();\n  const [currentIndex, setCurrentIndex] = useState(0);\n  const [quizSet, setQuizSet] = useState([]);\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\n  const [isCorrect, setIsCorrect] = useState(null);\n\n  // Ïä¨Îû≠ Î∞∞Ïó¥ÏóêÏÑú ÌÄ¥Ï¶à 5Í∞ú ÎûúÎç§ ÏÑ†ÌÉù\n  useEffect(() => {\n    const shuffled = [...knownSlangs].sort(() => 0.5 - Math.random());\n    const picked = shuffled.slice(0, 5);\n    const quizzes = picked.map(slang => {\n      const choices = [slang.meaning];\n      while (choices.length < 4) {\n        const random = knownSlangs[Math.floor(Math.random() * knownSlangs.length)];\n        if (!choices.includes(random.meaning)) {\n          choices.push(random.meaning);\n        }\n      }\n      return {\n        phrase: slang.phrase,\n        answer: slang.meaning,\n        choices: choices.sort(() => 0.5 - Math.random())\n      };\n    });\n    setQuizSet(quizzes);\n  }, [knownSlangs]);\n  const handleAnswer = choice => {\n    const currentQuiz = quizSet[currentIndex];\n    setSelectedAnswer(choice);\n    setIsCorrect(choice === currentQuiz.answer);\n    setTimeout(() => {\n      setSelectedAnswer(null);\n      setIsCorrect(null);\n      setCurrentIndex(prev => prev + 1);\n    }, 1000);\n  };\n  if (quizSet.length === 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \"\\uD034\\uC988 \\uB85C\\uB529 \\uC911...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 36\n  }, this);\n  if (currentIndex >= quizSet.length) return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"\\uD034\\uC988 \\uC644\\uB8CC \\uD83C\\uDF89\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onExit,\n      children: \"\\uB3CC\\uC544\\uAC00\\uAE30\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 44,\n    columnNumber: 7\n  }, this);\n  const currentQuiz = quizSet[currentIndex];\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"\\uD83E\\uDDE0 \\uD034\\uC988 \", currentIndex + 1, \" / \", quizSet.length]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: currentQuiz.phrase\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), \" \\uC758 \\uB73B\\uC740?\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 7\n    }, this), currentQuiz.choices.map((choice, i) => /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => handleAnswer(choice),\n      disabled: selectedAnswer !== null,\n      style: {\n        margin: \"6px\",\n        backgroundColor: selectedAnswer === choice ? isCorrect ? \"lightgreen\" : \"salmon\" : \"\"\n      },\n      children: choice\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(QuizMode, \"RgkwubGJiH8YLWDlTenvde/lfRI=\");\n_c = QuizMode;\nexport default QuizMode;\nvar _c;\n$RefreshReg$(_c, \"QuizMode\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","QuizMode","knownSlangs","onExit","_s","currentIndex","setCurrentIndex","quizSet","setQuizSet","selectedAnswer","setSelectedAnswer","isCorrect","setIsCorrect","shuffled","sort","Math","random","picked","slice","quizzes","map","slang","choices","meaning","length","floor","includes","push","phrase","answer","handleAnswer","choice","currentQuiz","setTimeout","prev","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","i","disabled","style","margin","backgroundColor","_c","$RefreshReg$"],"sources":["D:/Python/swipelang-frontend/src/components/QuizMode.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\n\r\nconst QuizMode = ({ knownSlangs, onExit }) => {\r\n  const [currentIndex, setCurrentIndex] = useState(0);\r\n  const [quizSet, setQuizSet] = useState([]);\r\n  const [selectedAnswer, setSelectedAnswer] = useState(null);\r\n  const [isCorrect, setIsCorrect] = useState(null);\r\n\r\n  // Ïä¨Îû≠ Î∞∞Ïó¥ÏóêÏÑú ÌÄ¥Ï¶à 5Í∞ú ÎûúÎç§ ÏÑ†ÌÉù\r\n  useEffect(() => {\r\n    const shuffled = [...knownSlangs].sort(() => 0.5 - Math.random());\r\n    const picked = shuffled.slice(0, 5);\r\n    const quizzes = picked.map((slang) => {\r\n      const choices = [slang.meaning];\r\n      while (choices.length < 4) {\r\n        const random = knownSlangs[Math.floor(Math.random() * knownSlangs.length)];\r\n        if (!choices.includes(random.meaning)) {\r\n          choices.push(random.meaning);\r\n        }\r\n      }\r\n      return {\r\n        phrase: slang.phrase,\r\n        answer: slang.meaning,\r\n        choices: choices.sort(() => 0.5 - Math.random()),\r\n      };\r\n    });\r\n    setQuizSet(quizzes);\r\n  }, [knownSlangs]);\r\n\r\n  const handleAnswer = (choice) => {\r\n    const currentQuiz = quizSet[currentIndex];\r\n    setSelectedAnswer(choice);\r\n    setIsCorrect(choice === currentQuiz.answer);\r\n    setTimeout(() => {\r\n      setSelectedAnswer(null);\r\n      setIsCorrect(null);\r\n      setCurrentIndex((prev) => prev + 1);\r\n    }, 1000);\r\n  };\r\n\r\n  if (quizSet.length === 0) return <p>ÌÄ¥Ï¶à Î°úÎî© Ï§ë...</p>;\r\n  if (currentIndex >= quizSet.length)\r\n    return (\r\n      <div>\r\n        <h3>ÌÄ¥Ï¶à ÏôÑÎ£å üéâ</h3>\r\n        <button onClick={onExit}>ÎèåÏïÑÍ∞ÄÍ∏∞</button>\r\n      </div>\r\n    );\r\n\r\n  const currentQuiz = quizSet[currentIndex];\r\n\r\n  return (\r\n    <div>\r\n      <h3>üß† ÌÄ¥Ï¶à {currentIndex + 1} / {quizSet.length}</h3>\r\n      <p>\r\n        <strong>{currentQuiz.phrase}</strong> Ïùò ÎúªÏùÄ?\r\n      </p>\r\n      {currentQuiz.choices.map((choice, i) => (\r\n        <button\r\n          key={i}\r\n          onClick={() => handleAnswer(choice)}\r\n          disabled={selectedAnswer !== null}\r\n          style={{\r\n            margin: \"6px\",\r\n            backgroundColor:\r\n              selectedAnswer === choice\r\n                ? isCorrect\r\n                  ? \"lightgreen\"\r\n                  : \"salmon\"\r\n                : \"\",\r\n          }}\r\n        >\r\n          {choice}\r\n        </button>\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default QuizMode;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}